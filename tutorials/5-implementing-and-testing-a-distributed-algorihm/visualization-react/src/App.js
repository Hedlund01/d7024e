import React, { useState, useCallback } from 'react';
import NetworkVisualization from './components/NetworkVisualization';
import MessageReplay from './components/MessageReplay';
import './App.css';

function App() {
  const [visualizationData, setVisualizationData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [currentTrace, setCurrentTrace] = useState(null);
  const [replayProgress, setReplayProgress] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);

  const handleFileUpload = useCallback((event) => {
    const file = event.target.files[0];
    if (file && file.type === 'application/json') {
      setLoading(true);
      setError(null);
      
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = JSON.parse(e.target.result);
          setVisualizationData(data);
        } catch (err) {
          setError('Failed to parse JSON file: ' + err.message);
        } finally {
          setLoading(false);
        }
      };
      reader.onerror = () => {
        setError('Failed to read file');
        setLoading(false);
      };
      reader.readAsText(file);
    } else {
      setError('Please select a valid JSON file');
    }
  }, []);

  const loadSampleData = useCallback(async () => {
    setLoading(true);
    setError(null);
    
    try {
      // Try to load the generated visualization file
      const response = await fetch('/network_visualization.json');
      if (response.ok) {
        const data = await response.json();
        setVisualizationData(data);
      } else {
        setError('Sample data not found. Please run the Go test to generate data first.');
      }
    } catch (err) {
      setError('Failed to load sample data: ' + err.message);
    } finally {
      setLoading(false);
    }
  }, []);

  return (
    <div className="App">
      <header className="App-header">
        <h1>üï∏Ô∏è Gossip Protocol Network Visualizer</h1>
        <p>Visualize how information spreads through a distributed network using the gossip protocol</p>
      </header>

      {!visualizationData && (
        <div className="upload-section">
          <div className="upload-options">
            <div className="upload-option">
              <h3>Upload Visualization Data</h3>
              <input
                type="file"
                accept=".json"
                onChange={handleFileUpload}
                disabled={loading}
                className="file-input"
              />
              <p className="help-text">
                Select the network_visualization.json file generated by the Go program
              </p>
            </div>
            
            <div className="upload-option">
              <h3>Load Sample Data</h3>
              <button 
                onClick={loadSampleData}
                disabled={loading}
                className="sample-button"
              >
                Load Sample Network
              </button>
              <p className="help-text">
                Load pre-generated sample data (requires running Go test first)
              </p>
            </div>
          </div>
        </div>
      )}

      {loading && (
        <div className="loading">
          <div className="spinner"></div>
          <p>Loading network data...</p>
        </div>
      )}

      {error && (
        <div className="error">
          <h3>‚ùå Error</h3>
          <p>{error}</p>
          <button onClick={() => setError(null)}>Dismiss</button>
        </div>
      )}

      {visualizationData && (
        <div className="visualization-container">
          <div className="stats-panel">
            <h3>üìä Network Statistics</h3>
            <div className="stats-grid">
              <div className="stat">
                <span className="stat-label">Total Nodes:</span>
                <span className="stat-value">{visualizationData.topology.nodes.length}</span>
              </div>
              <div className="stat">
                <span className="stat-label">Total Connections:</span>
                <span className="stat-value">{visualizationData.topology.edges.length}</span>
              </div>
              <div className="stat">
                <span className="stat-label">Message Traces:</span>
                <span className="stat-value">{visualizationData.traces.length}</span>
              </div>
              <div className="stat">
                <span className="stat-label">Simulation Start:</span>
                <span className="stat-value">{new Date(visualizationData.startTime).toLocaleTimeString()}</span>
              </div>
            </div>
            
            <button 
              className="reset-button"
              onClick={() => setVisualizationData(null)}
            >
              üîÑ Load New Data
            </button>
          </div>

          <NetworkVisualization 
            data={visualizationData} 
            currentTrace={currentTrace}
            replayProgress={replayProgress}
            isPlaying={isPlaying}
          />
          <MessageReplay 
            traces={visualizationData.traces}
            onTraceChange={setCurrentTrace}
            onProgressChange={setReplayProgress}
            onPlayStateChange={setIsPlaying}
          />
        </div>
      )}
    </div>
  );
}

export default App;